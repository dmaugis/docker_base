From c4cc3d59c18ec854b3605570986839e58e52aeb3 Mon Sep 17 00:00:00 2001
From: Dirk Stoecker <github@dstoecker.de>
Date: Fri, 24 Aug 2018 10:56:37 +0200
Subject: [PATCH] remove nogil, so it compiles with newer cython versions -
 probably adding nogil to the base classes is the better path to go on

---
 pcl/pcl_registration_180.pxd                  | 32 +++++++++----------
 .../GeneralizedIterativeClosestPoint_180.pxi  |  3 +-
 .../IterativeClosestPointNonLinear_180.pxi    |  3 +-
 .../IterativeClosestPoint_180.pxi             |  3 +-
 4 files changed, 19 insertions(+), 22 deletions(-)

diff --git a/pcl/pcl_registration_180.pxd b/pcl/pcl_registration_180.pxd
index 0c5af34..fa44270 100644
--- a/pcl/pcl_registration_180.pxd
+++ b/pcl/pcl_registration_180.pxd
@@ -19,7 +19,7 @@ from eigen cimport Matrix4f
 #  */
 # template <typename PointSource, typename PointTarget, typename Scalar = float>
 # class Registration : public PCLBase<PointSource>
-cdef extern from "pcl/registration/registration.h" namespace "pcl" nogil:
+cdef extern from "pcl/registration/registration.h" namespace "pcl":
     cdef cppclass Registration[Source, Target, float](cpp.PCLBase[Source]):
         Registration()
         # public:
@@ -419,7 +419,7 @@ cdef extern from "pcl/registration/correspondence_rejection.h" namespace "pcl::r
 #   */
 # template <typename PointSource, typename PointTarget, typename Scalar = float>
 # class CorrespondenceEstimationBase: public PCLBase<PointSource>
-cdef extern from "pcl/registration/correspondence_estimation.h" namespace "pcl::registration" nogil:
+cdef extern from "pcl/registration/correspondence_estimation.h" namespace "pcl::registration":
     cdef cppclass CorrespondenceEstimationBase[Source, Target, float](cpp.PCLBase[Source]):
         CorrespondenceEstimationBase()
         # public:
@@ -571,7 +571,7 @@ cdef extern from "pcl/registration/correspondence_estimation.h" namespace "pcl::
 
 # template <typename PointSource, typename PointTarget, typename Scalar = float>
 # class CorrespondenceEstimation : public CorrespondenceEstimationBase<PointSource, PointTarget, Scalar>
-cdef extern from "pcl/registration/correspondence_estimation.h" namespace "pcl::registration" nogil:
+cdef extern from "pcl/registration/correspondence_estimation.h" namespace "pcl::registration":
     cdef cppclass CorrespondenceEstimation[Source, Target, float](CorrespondenceEstimationBase[Source, Target, float]):
         CorrespondenceEstimation()
         # public:
@@ -631,7 +631,7 @@ cdef extern from "pcl/registration/correspondence_estimation.h" namespace "pcl::
 # icp.h
 # template <typename PointSource, typename PointTarget, typename Scalar = float>
 # class IterativeClosestPoint : public Registration<PointSource, PointTarget, Scalar>
-cdef extern from "pcl/registration/icp.h" namespace "pcl" nogil:
+cdef extern from "pcl/registration/icp.h" namespace "pcl":
     cdef cppclass IterativeClosestPoint[Source, Target, Scalar](Registration[Source, Target, Scalar]):
         IterativeClosestPoint() except +
         # ctypedef typename Registration<PointSource, PointTarget>::PointCloudSource PointCloudSource;
@@ -691,7 +691,7 @@ ctypedef shared_ptr[IterativeClosestPoint[cpp.PointXYZRGBA, cpp.PointXYZRGBA, fl
 #  */
 # template <typename PointSource, typename PointTarget, typename Scalar = float>
 # class IterativeClosestPointWithNormals : public IterativeClosestPoint<PointSource, PointTarget, Scalar>
-cdef extern from "pcl/registration/icp.h" namespace "pcl" nogil:
+cdef extern from "pcl/registration/icp.h" namespace "pcl":
     cdef cppclass IterativeClosestPointWithNormals[Source, Target, Scalar](IterativeClosestPoint[Source, Target, Scalar]):
         IterativeClosestPointWithNormals() except +
         # public:
@@ -736,7 +736,7 @@ ctypedef shared_ptr[IterativeClosestPointWithNormals[cpp.PointXYZRGBA, cpp.Point
 #   */
 # template <typename PointSource, typename PointTarget>
 # class GeneralizedIterativeClosestPoint : public IterativeClosestPoint<PointSource, PointTarget>
-cdef extern from "pcl/registration/gicp.h" namespace "pcl" nogil:
+cdef extern from "pcl/registration/gicp.h" namespace "pcl":
     cdef cppclass GeneralizedIterativeClosestPoint[Source, Target](IterativeClosestPoint[Source, Target, float]):
         GeneralizedIterativeClosestPoint() except +
         # using IterativeClosestPoint<PointSource, PointTarget>::reg_name_;
@@ -877,7 +877,7 @@ ctypedef shared_ptr[GeneralizedIterativeClosestPoint[cpp.PointXYZRGBA, cpp.Point
 #     */
 # template <typename PointSource, typename PointTarget, typename Scalar = float>
 # class IterativeClosestPointNonLinear : public IterativeClosestPoint<PointSource, PointTarget, Scalar>
-cdef extern from "pcl/registration/icp_nl.h" namespace "pcl" nogil:
+cdef extern from "pcl/registration/icp_nl.h" namespace "pcl":
     cdef cppclass IterativeClosestPointNonLinear[Source, Target, Scalar](IterativeClosestPoint[Source, Target, Scalar]):
         IterativeClosestPointNonLinear() except +
 
@@ -1056,7 +1056,7 @@ ctypedef shared_ptr[IterativeClosestPointNonLinear[cpp.PointXYZRGBA, cpp.PointXY
 #   */
 # template <typename PointSource, typename PointTarget, typename NormalT, typename Scalar = float>
 # class CorrespondenceEstimationBackProjection : public CorrespondenceEstimationBase <PointSource, PointTarget, Scalar>
-cdef extern from "pcl/registration/correspondence_estimation.h" namespace "pcl::registration" nogil:
+cdef extern from "pcl/registration/correspondence_estimation.h" namespace "pcl::registration":
     cdef cppclass CorrespondenceEstimationBackProjection[Source, Target, Normal](CorrespondenceEstimationBase[Source, Target, float]):
         CorrespondenceEstimationBackProjection ()
         # public:
@@ -1161,7 +1161,7 @@ cdef extern from "pcl/registration/correspondence_estimation.h" namespace "pcl::
 # correspondence_estimation_normal_shooting.h
 # template <typename PointSource, typename PointTarget, typename NormalT>
 # class CorrespondenceEstimationNormalShooting : public CorrespondenceEstimation <PointSource, PointTarget>
-cdef extern from "pcl/registration/correspondence_estimation_normal_shooting.h" namespace "pcl::registration" nogil:
+cdef extern from "pcl/registration/correspondence_estimation_normal_shooting.h" namespace "pcl::registration":
     cdef cppclass CorrespondenceEstimationNormalShooting[Source, Target, NormalT](CorrespondenceEstimation[Source, Target, NormalT]):
         CorrespondenceEstimationNormalShooting()
         # public:
@@ -2428,7 +2428,7 @@ cdef extern from "pcl/registration/correspondence_rejection_var_trimmed.h" names
 # elch.h
 # template <typename PointT>
 # class ELCH : public PCLBase<PointT>
-cdef extern from "pcl/registration/elch.h" namespace "pcl::registration" nogil:
+cdef extern from "pcl/registration/elch.h" namespace "pcl::registration":
     cdef cppclass ELCH[T](cpp.PCLBase[T]):
         ELCH()
 #       public:
@@ -2640,7 +2640,7 @@ cdef extern from "pcl/registration/elch.h" namespace "pcl::registration" nogil:
 # ia_ransac.h
 # template <typename PointSource, typename PointTarget, typename FeatureT>
 # class SampleConsensusInitialAlignment : public Registration<PointSource, PointTarget>
-cdef extern from "pcl/registration/ia_ransac.h" namespace "pcl" nogil:
+cdef extern from "pcl/registration/ia_ransac.h" namespace "pcl":
     cdef cppclass SampleConsensusInitialAlignment[Source, Target, Feature](Registration[Source, Target, float]):
         SampleConsensusInitialAlignment() except +
         # public:
@@ -3153,7 +3153,7 @@ cdef extern from "pcl/registration/lum.h" namespace "pcl" nogil:
 #   */
 # template<typename PointSource, typename PointTarget>
 # class NormalDistributionsTransform : public Registration<PointSource, PointTarget>
-cdef extern from "pcl/registration/ndt.h" namespace "pcl" nogil:
+cdef extern from "pcl/registration/ndt.h" namespace "pcl":
     cdef cppclass NormalDistributionsTransform[Source, Target](Registration[Source, Target, float]):
         NormalDistributionsTransform()
         # protected:
@@ -3277,7 +3277,7 @@ ctypedef shared_ptr[NormalDistributionsTransform[cpp.PointXYZRGBA, cpp.PointXYZR
 #   */
 # template <typename PointSource, typename PointTarget>
 # class NormalDistributionsTransform2D : public Registration<PointSource, PointTarget>
-cdef extern from "pcl/registration/ndt_2d.h" namespace "pcl" nogil:
+cdef extern from "pcl/registration/ndt_2d.h" namespace "pcl":
     cdef cppclass NormalDistributionsTransform2D[Source, Target, float](Registration[Source, Target, float]):
         NormalDistributionsTransform2D()
         # typedef typename Registration<PointSource, PointTarget>::PointCloudSource PointCloudSource;
@@ -3341,7 +3341,7 @@ cdef extern from "pcl/registration/ndt_2d.h" namespace "pcl" nogil:
 # ppf_registration.h
 # template <typename PointSource, typename PointTarget>
 # class PPFRegistration : public Registration<PointSource, PointTarget>
-cdef extern from "pcl/registration/ppf_registration.h" namespace "pcl" nogil:
+cdef extern from "pcl/registration/ppf_registration.h" namespace "pcl":
     cdef cppclass PPFRegistration[Source, Target, float](Registration[Source, Target, float]):
         PPFRegistration() except +
         # public:
@@ -3427,7 +3427,7 @@ cdef extern from "pcl/registration/ppf_registration.h" namespace "pcl" nogil:
 # template <typename PointFeature>
 # class PyramidFeatureHistogram : public PCLBase<PointFeature>
 # cdef cppclass PyramidFeatureHistogram[PointFeature](PCLBase[PointFeature]):
-cdef extern from "pcl/registration/pyramid_feature_matching.h" namespace "pcl" nogil:
+cdef extern from "pcl/registration/pyramid_feature_matching.h" namespace "pcl":
     cdef cppclass PyramidFeatureHistogram[PointFeature]:
         PyramidFeatureHistogram() except +
         # public:
@@ -3506,7 +3506,7 @@ cdef extern from "pcl/registration/pyramid_feature_matching.h" namespace "pcl" n
 #  */
 # template <typename PointSource, typename PointTarget, typename FeatureT>
 # class SampleConsensusPrerejective : public Registration<PointSource, PointTarget>
-cdef extern from "pcl/registration/sample_consensus_prerejective.h" namespace "pcl" nogil:
+cdef extern from "pcl/registration/sample_consensus_prerejective.h" namespace "pcl":
     cdef cppclass SampleConsensusPrerejective[Source, Target, Feature](Registration[Source, Target, float]):
         SampleConsensusPrerejective()
         # public:
diff --git a/pcl/pxi/registration/GeneralizedIterativeClosestPoint_180.pxi b/pcl/pxi/registration/GeneralizedIterativeClosestPoint_180.pxi
index 809f737..7ee4623 100644
--- a/pcl/pxi/registration/GeneralizedIterativeClosestPoint_180.pxi
+++ b/pcl/pxi/registration/GeneralizedIterativeClosestPoint_180.pxi
@@ -42,8 +42,7 @@ cdef class GeneralizedIterativeClosestPoint:
         
         cdef _pcl.PointCloud result = _pcl.PointCloud()
         
-        with nogil:
-            reg.align(result.thisptr()[0])
+        reg.align(result.thisptr()[0])
         
         # Get transformation matrix and convert from Eigen to NumPy format.
         # cdef pcl_reg.Registration[cpp.PointXYZ, cpp.PointXYZ].Matrix4f mat
diff --git a/pcl/pxi/registration/IterativeClosestPointNonLinear_180.pxi b/pcl/pxi/registration/IterativeClosestPointNonLinear_180.pxi
index c3db5e9..f8586db 100644
--- a/pcl/pxi/registration/IterativeClosestPointNonLinear_180.pxi
+++ b/pcl/pxi/registration/IterativeClosestPointNonLinear_180.pxi
@@ -42,8 +42,7 @@ cdef class IterativeClosestPointNonLinear:
         
         cdef _pcl.PointCloud result = _pcl.PointCloud()
         
-        with nogil:
-            reg.align(result.thisptr()[0])
+        reg.align(result.thisptr()[0])
         
         # Get transformation matrix and convert from Eigen to NumPy format.
         # cdef pcl_reg.Registration[cpp.PointXYZ, cpp.PointXYZ].Matrix4f mat
diff --git a/pcl/pxi/registration/IterativeClosestPoint_180.pxi b/pcl/pxi/registration/IterativeClosestPoint_180.pxi
index cef4981..0e0215b 100644
--- a/pcl/pxi/registration/IterativeClosestPoint_180.pxi
+++ b/pcl/pxi/registration/IterativeClosestPoint_180.pxi
@@ -59,8 +59,7 @@ cdef class IterativeClosestPoint:
         
         cdef _pcl.PointCloud result = _pcl.PointCloud()
         
-        with nogil:
-            reg.align(result.thisptr()[0])
+        reg.align(result.thisptr()[0])
         
         # Get transformation matrix and convert from Eigen to NumPy format.
         # cdef pcl_reg.Registration[cpp.PointXYZ, cpp.PointXYZ].Matrix4f mat

